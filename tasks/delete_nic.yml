- name: Send request to API (list ECS for lookup)
  uri:
    url: "{{ AUTH_URL_ECS }}/servers"
    method: GET
    return_content: yes
    follow_redirects: "{{ uri_follow_redirects }}"
    validate_certs: "{{ uri_validate_certs }}"
    headers:
      Content-Type: "application/json"
      X-Auth-Token: "{{ token['x_subject_token'] }}"
  register: ecs_result
  retries: "{{ uri_retries }}"
  delay: "{{ uri_delay }}"
  until: ecs_result.status == 200
  changed_when: false
  when: ecs_name is defined

- name: Set fact ecs_id for ecs if ecs_name is defined
  set_fact:
    ecs_id: "{{ (ecs_result.content|from_json)|json_query(\"servers[?name=='\" + ecs_name + \"'].id|[0]\") }}"
  when: ecs_name is defined

# cant search for subnet in delete port_id search due the gateway and broadcast ports
# - name: Send request to API (list subnet for lookup)
#   uri:
#     url: "{{ AUTH_URL_VPC }}/v1/{{ PROJECT_ID }}/subnets"
#     method: GET
#     return_content: yes
#     follow_redirects: "{{ uri_follow_redirects }}"
#     validate_certs: "{{ uri_validate_certs }}"
#     headers:
#       Content-Type: "application/json"
#       X-Auth-Token: "{{ token['x_subject_token'] }}"
#   register: subnet_result
#   retries: "{{ uri_retries }}"
#   delay: "{{ uri_delay }}"
#   until: subnet_result.status == 200
#   changed_when: false
#   when:
#     - subnet_name is defined

# - name: Set fact for subnet_id if subnet_name is defined
#   set_fact:
#     neutron_subnet_id: "{{ (subnet_result.content|from_json)|json_query(\"subnets[?name=='\" + subnet_name + \"'].neutron_subnet_id|[0]\") }}"
#   when:
#     - subnet_name is defined and subnet_name|length != 0

- name: Send request to API (list ports for lookup)
  uri:
    url: "{{ AUTH_URL_VPC }}/v2.0/ports"
    method: GET
    return_content: yes
    follow_redirects: "{{ uri_follow_redirects }}"
    validate_certs: "{{ uri_validate_certs }}"
    headers:
      Content-Type: "application/json"
      X-Auth-Token: "{{ token['x_subject_token'] }}"
  register: ports
  retries: "{{ uri_retries }}"
  delay: "{{ uri_delay }}"
  until: ports.status == 200
  changed_when: false


- name: Set fact port_id for ecs
  set_fact:
    port_id: "{{ ports.json|json_query(\"ports[?fixed_ips[?ip_address=='\" + ecs_ipaddress + \"']].id|[0]\") }}"
  when:
    - ecs_id is defined

- name: Send request to API (delete NIC)
  uri:
    url: "{{ AUTH_URL_ECS_CLOUD }}/{{ PROJECT_ID }}/cloudservers/{{ ecs_id }}/nics/delete"
    method: POST
    body_format: raw
    return_content: yes
    follow_redirects: "{{ uri_follow_redirects }}"
    validate_certs: "{{ uri_validate_certs }}"
    headers:
      Content-Type: "application/json"
      X-Auth-Token: "{{ token['x_subject_token'] }}"
    body: "{{ lookup('template', 'delete_nic.json.j2')|to_json }}"
  register: nic
  retries: "{{ uri_retries }}"
  delay: "{{ uri_delay }}"
  until: nic.status == 200
  changed_when: false
  when:
    - port_id is defined

- name: Set fact job_id
  set_fact:
    job_id: "{{ nic.json.job_id }}"
  when:
    - nic is defined and nic.content|length != 0

- name: Output of job_id
  debug:
    msg: "{{ job_id }}"
  when: job_id is defined

- name: Request job status from API (waiting for SUCCESS)
  uri:
    url: "{{ AUTH_URL_ECS_CLOUD }}/{{ PROJECT_ID }}/jobs/{{ nic.json.job_id }}"
    method: GET
    return_content: yes
    follow_redirects: "{{ uri_follow_redirects }}"
    validate_certs: "{{ uri_validate_certs }}"
    headers:
      Content-Type: "application/json"
      X-Auth-Token: "{{ token['x_subject_token'] }}"
  register: jobstatus
  retries: 100
  delay: 5
  until: jobstatus.json.status == 'SUCCESS'
  changed_when: false
  when:
    - nic is defined
    - waitfor | bool
