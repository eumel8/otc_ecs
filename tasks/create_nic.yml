- name: Send request to API (list ECS for lookup)
  uri:
    url: "{{ AUTH_URL_ECS }}/servers"
    method: GET
    return_content: yes
    follow_redirects: "{{ uri_follow_redirects }}"
    validate_certs: "{{ uri_validate_certs }}"
    headers:
      Content-Type: "application/json"
      X-Auth-Token: "{{ token['x_subject_token'] }}"
  register: ecs_result
  retries: "{{ uri_retries }}"
  delay: "{{ uri_delay }}"
  until: ecs_result.status == 200
  changed_when: false
  when: ecs_name is defined

- name: Set fact ecs_id for ecs if ecs_name is defined
  set_fact:
    ecs_id: "{{ (ecs_result.content|from_json)|json_query(\"servers[?name=='\" + ecs_name + \"'].id|[0]\") }}"
  when: ecs_name is defined

- name: Send request to API (list subnet for lookup)
  uri:
    url: "{{ AUTH_URL_VPC }}/v1/{{ PROJECT_ID }}/subnets"
    method: GET
    return_content: yes
    follow_redirects: "{{ uri_follow_redirects }}"
    validate_certs: "{{ uri_validate_certs }}"
    headers:
      Content-Type: "application/json"
      X-Auth-Token: "{{ token['x_subject_token'] }}"
  register: subnet_result
  retries: "{{ uri_retries }}"
  delay: "{{ uri_delay }}"
  until: subnet_result.status == 200
  changed_when: false
  when:
    - subnet_name is defined

- name: Set fact for subnet_id if subnet_name is defined
  set_fact:
    subnet_id: "{{ (subnet_result.content|from_json)|json_query(\"subnets[?name=='\" + subnet_name + \"'].id|[0]\") }}"
  when:
    - subnet_name is defined and subnet_name|length != 0

- name: Send request to API (list security groups)
  uri:
    url: "{{ AUTH_URL_VPC }}/v1/{{ PROJECT_ID }}/security-groups"
    method: GET
    return_content: yes
    follow_redirects: "{{ uri_follow_redirects }}"
    validate_certs: "{{ uri_validate_certs }}"
    headers:
      Content-Type: "application/json"
      X-Auth-Token: "{{ token['x_subject_token'] }}"
  register: secgroup_result
  retries: "{{ uri_retries }}"
  delay: "{{ uri_delay }}"
  until: secgroup_result.status == 200
  changed_when: false
  when:
    - secgroup_name is defined

- name: Set fact for secgroup_id if secgroup_name is defined
  set_fact:
    secgroup_id: "{{ (secgroup_result.content|from_json)|json_query(\"security_groups[?name=='\" + secgroup_name + \"'].id|[0]\") }}"
  when:
    - secgroup_name is defined and secgroup_name| length != 0

- name: Set empty fact secgroup_names
  set_fact:
    secgroup_names: []
  when:
    - secgroup_names is not defined

- name: Set empty fact secgroup_ids
  set_fact:
    secgroup_ids: []
  when:
    - secgroup_ids is not defined

- name: Set fact for secgroup_ids if secgroup_id is defined
  set_fact:
    secgroup_ids: "{{ secgroup_ids }} + [ '{{ secgroup_id }}' ]"
    secgroup_names: "{{ secgroup_names }} + [ '{{ secgroup_name }}' ]"
  when:
    - secgroup_id is defined and secgroup_id| length != 0

- name: Send request to API (create NIC)
  uri:
    url: "{{ AUTH_URL_ECS_CLOUD }}/{{ PROJECT_ID }}/cloudservers/{{ ecs_id }}/nics"
    method: POST
    body_format: raw
    return_content: yes
    follow_redirects: "{{ uri_follow_redirects }}"
    validate_certs: "{{ uri_validate_certs }}"
    headers:
      Content-Type: "application/json"
      X-Auth-Token: "{{ token['x_subject_token'] }}"
    body: "{{ lookup('template', 'create_nic.json.j2')|to_json }}"
  register: nic
  retries: "{{ uri_retries }}"
  delay: "{{ uri_delay }}"
  until: nic.status == 200
  changed_when: false
  when:
    - ecs_name is defined

- name: Set fact job_id
  set_fact:
    job_id: "{{ nic.json.job_id }}"
  when:
    - nic is defined and nic.content|length != 0

- name: Output of job_id
  debug:
    msg: "{{ job_id }}"
  when: job_id is defined

- name: Request job status from API (waiting for SUCCESS)
  uri:
    url: "{{ AUTH_URL_ECS_CLOUD }}/{{ PROJECT_ID }}/jobs/{{ nic.json.job_id }}"
    method: GET
    return_content: yes
    follow_redirects: "{{ uri_follow_redirects }}"
    validate_certs: "{{ uri_validate_certs }}"
    headers:
      Content-Type: "application/json"
      X-Auth-Token: "{{ token['x_subject_token'] }}"
  register: jobstatus
  retries: 100
  delay: 5
  until: jobstatus.json.status == 'SUCCESS'
  changed_when: false
  when:
    - nic is defined
    - waitfor | bool
