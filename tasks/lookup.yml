- name: Send request to API (list ECS for lookup)
  uri:
    url: "{{ AUTH_URL_ECS }}/servers"
    method: GET
    return_content: yes
    follow_redirects: "{{ uri_follow_redirects }}"
    validate_certs: "{{ uri_validate_certs }}"
    headers:
      Content-Type: "application/json"
      X-Auth-Token: "{{ token['x_subject_token'] }}"
  register: ecs_result
  retries: "{{ uri_retries }}"
  delay: "{{ uri_delay }}"
  until: ecs_result.status == 200
  changed_when: false
  when: ecs_name is defined

- name: Set fact ecs_id for ecs if ecs_name is defined
  set_fact:
    ecs_id: "{{ (ecs_result.content|from_json)|json_query(\"servers[?name=='\" + ecs_name + \"'].id|[0]\") }}"
  when: ecs_name is defined

- name: Send request to API (list flavor for lookup)
  uri:
    url: "{{ AUTH_URL_ECS_CLOUD }}/{{ PROJECT_ID }}/cloudservers/flavors"
    method: GET
    return_content: yes
    follow_redirects: "{{ uri_follow_redirects }}"
    validate_certs: "{{ uri_validate_certs }}"
    headers:
      Content-Type: "application/json"
      X-Auth-Token: "{{ token['x_subject_token'] }}"
  register: flavor_result
  retries: "{{ uri_retries }}"
  delay: "{{ uri_delay }}"
  until: flavor_result.status == 200
  changed_when: false
  when:
    - ecs_name is defined
    - (ecs_ram is defined and ecs_ram|length != 0) and (ecs_vcpus is defined and ecs_vcpus|length != 0)

- name: Set fact flavor_id if ecs_ram or ecs_vcpus is defined
  set_fact:
    flavor_id: "{{ (flavor_result.content|from_json)|json_query('sort_by(flavors, &ram)|[?ram>=`' + ecs_ram + '` && vcpus>=`' + ecs_vcpus + '`].id|[0]') }}"
  when:
    - ecs_name is defined
    - (ecs_ram is defined and ecs_ram |length != 0) or (ecs_vcpus is defined and ecs_vcpus|length != 0)

# this code below is duplicated to the ref roles
# - name: Send request to API (list images for lookup)
#   uri:
#     url: "{{ AUTH_URL_IMS }}/v2/cloudimages?name={{ image_name }}"
#     method: GET
#     return_content: yes
#     validate_certs: yes
#     headers:
#       Content-Type: "application/json"
#       X-Auth-Token: "{{ token['x_subject_token'] }}"
#   register: ims_result
#   when:
#     - image_name is defined
#
# - name: Set fact image_id if image_name is defined
#   set_fact:
#     image_id: "{{ (ims_result.content|from_json)|json_query('images[].id|[0]') }}"
#   when:
#     - image_name is defined
#
# - name: Send request to API (list subnet for lookup)
#   uri:
#     url: "{{ AUTH_URL_VPC }}/v1/{{ PROJECT_ID }}/subnets"
#     method: GET
#     return_content: yes
#     validate_certs: yes
#     headers:
#       Content-Type: "application/json"
#       X-Auth-Token: "{{ token['x_subject_token'] }}"
#   when:
#     - subnet_name is defined
#   register: subnet_result
#
# - name: Set fact for subnet_id if subnet_name is defined
#   set_fact:
#     subnet_id: "{{ (subnet_result.content|from_json)|json_query(\"subnets[?name=='\" + subnet_name + \"'].id|[0]\") }}"
#   when:
#     - subnet_name is defined and subnet_name|length != 0
#
